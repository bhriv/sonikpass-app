var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

require.define({
  'create_task_view': function(exports, require, module) {
    var CreateTaskView, FormView, TaskModel;
    FormView = require('form_view');
    TaskModel = require('task_model');
    return module.exports = CreateTaskView = (function(superClass) {
      extend(CreateTaskView, superClass);

      function CreateTaskView() {
        return CreateTaskView.__super__.constructor.apply(this, arguments);
      }

      CreateTaskView.prototype.template = require('templates/create_task_template');

      CreateTaskView.prototype.className = 'task-form';

      CreateTaskView.prototype.ui = {
        name: '[name="name"]',
        priority: '[name="priority"]',
        activityIndicator: '.loading'
      };

      CreateTaskView.prototype.createModel = function() {
        return new TaskModel;
      };

      CreateTaskView.prototype.updateModel = function() {
        return this.model.set({
          name: this.ui.name.val(),
          priority: parseInt(this.ui.priority.val())
        });
      };

      CreateTaskView.prototype.onSuccess = function(model) {
        return Backbone.trigger('task:create', model);
      };

      return CreateTaskView;

    })(FormView);
  }
});

// ---
// generated by coffee-script 1.9.2